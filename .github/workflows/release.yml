name: Release

# This workflow runs when you push a tag like "v0.1.0"
on:
  push:
    tags:
      - 'v*'

jobs:
  build_wheels:
    name: Build wheels for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false  # Don't cancel other jobs if one fails
      matrix:
        # Build on Linux and macOS for now (Windows has python38.lib issues)
        os: [ubuntu-latest, macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust for ARM on Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          rustup target add aarch64-unknown-linux-gnu
          sudo apt-get update && sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install maturin
        run: pip install maturin

      - name: Build wheels using maturin
        run: |
          if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
            # Build for Linux x86_64 only for now
            # TODO: Add ARM64 support with proper cross-compilation setup
            maturin build --release --out dist --interpreter python3.8 python3.9 python3.10 python3.11 python3.12
          elif [ "${{ matrix.os }}" == "macos-latest" ]; then
            # Build for native macOS architecture
            # Note: universal2 has metadata issues with maturin
            maturin build --release --out dist --interpreter python3.8 python3.9 python3.10 python3.11 python3.12
          else
            # Windows x86_64
            maturin build --release --out dist --interpreter python3.8 python3.9 python3.10 python3.11 python3.12
          fi
        shell: bash

      - name: Upload the wheels as a build artifact
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: dist/*.whl

  upload_pypi:
    name: Upload to PyPI
    needs: [build_wheels] # This job waits for all the wheels to be built
    runs-on: ubuntu-latest
    # This uses PyPI's trusted publishing to avoid API tokens
    permissions:
      id-token: write

    steps:
      - name: Download all wheels from build artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          pattern: wheels-*
          merge-multiple: true

      - name: Publish package to PyPI
        uses: pypa/gh-action-pypi-publish@v1.9.0